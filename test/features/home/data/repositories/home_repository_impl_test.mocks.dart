// Mocks generated by Mockito 5.4.4 from annotations
// in coffee_shop_360/test/features/home/data/repositories/home_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:coffee_shop_360/core/managers/network/models/failure_model.dart'
    as _i5;
import 'package:coffee_shop_360/core/managers/network/network_manager.dart'
    as _i3;
import 'package:coffee_shop_360/core/managers/network/network_model.dart'
    as _i1;
import 'package:coffee_shop_360/core/managers/network/network_result.dart'
    as _i7;
import 'package:coffee_shop_360/features/home/data/data_sources/home_data_source.dart'
    as _i4;
import 'package:coffee_shop_360/features/home/data/models/coffee_model.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i2;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNetworkManager_0<F extends _i1.INetworkModel<dynamic>>
    extends _i2.SmartFake implements _i3.NetworkManager<F> {
  _FakeNetworkManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeDataSource extends _i2.Mock implements _i4.HomeDataSource {
  MockHomeDataSource() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i3.NetworkManager<_i5.FailureModel> get networkManager =>
      (super.noSuchMethod(
        Invocation.getter(#networkManager),
        returnValue: _FakeNetworkManager_0<_i5.FailureModel>(
          this,
          Invocation.getter(#networkManager),
        ),
      ) as _i3.NetworkManager<_i5.FailureModel>);

  @override
  _i6.Future<_i7.NetworkResult<List<_i8.CoffeeModel?>, _i5.FailureModel>>
      fetchAllCoffees() => (super.noSuchMethod(
            Invocation.method(
              #fetchAllCoffees,
              [],
            ),
            returnValue: _i6.Future<
                _i7.NetworkResult<List<_i8.CoffeeModel?>,
                    _i5.FailureModel>>.value(_i9.dummyValue<
                _i7.NetworkResult<List<_i8.CoffeeModel?>, _i5.FailureModel>>(
              this,
              Invocation.method(
                #fetchAllCoffees,
                [],
              ),
            )),
          ) as _i6.Future<
              _i7.NetworkResult<List<_i8.CoffeeModel?>, _i5.FailureModel>>);
}
